
STM32IDE_Lab345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000001a0  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fb8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf4  00000000  00000000  00034008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a6b  00000000  00000000  00038978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012072  00000000  00000000  0005b3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3a9  00000000  00000000  0006d455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a7fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cd8  00000000  00000000  0013a854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004550 	.word	0x08004550

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004550 	.word	0x08004550

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	482f      	ldr	r0, [pc, #188]	; (8000588 <button_Scan+0xc8>)
 80004cc:	f002 f9b8 	bl	8002840 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	482c      	ldr	r0, [pc, #176]	; (8000588 <button_Scan+0xc8>)
 80004d6:	f002 f9b3 	bl	8002840 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004da:	230a      	movs	r3, #10
 80004dc:	2202      	movs	r2, #2
 80004de:	492b      	ldr	r1, [pc, #172]	; (800058c <button_Scan+0xcc>)
 80004e0:	482b      	ldr	r0, [pc, #172]	; (8000590 <button_Scan+0xd0>)
 80004e2:	f002 fe90 	bl	8003206 <HAL_SPI_Receive>
	  int button_index = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e03f      	b.n	8000576 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db06      	blt.n	800050a <button_Scan+0x4a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	dc03      	bgt.n	800050a <button_Scan+0x4a>
			  button_index = i + 4;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3304      	adds	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e018      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b03      	cmp	r3, #3
 800050e:	dd07      	ble.n	8000520 <button_Scan+0x60>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b07      	cmp	r3, #7
 8000514:	dc04      	bgt.n	8000520 <button_Scan+0x60>
			  button_index = 7 - i;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f1c3 0307 	rsb	r3, r3, #7
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e00d      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dd06      	ble.n	8000534 <button_Scan+0x74>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0b      	cmp	r3, #11
 800052a:	dc03      	bgt.n	8000534 <button_Scan+0x74>
			  button_index = i + 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	e003      	b.n	800053c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f1c3 0317 	rsb	r3, r3, #23
 800053a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <button_Scan+0xcc>)
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	897b      	ldrh	r3, [r7, #10]
 8000542:	4013      	ands	r3, r2
 8000544:	b29b      	uxth	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <button_Scan+0x96>
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <button_Scan+0xd4>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2100      	movs	r1, #0
 8000550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000554:	e009      	b.n	800056a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <button_Scan+0xd4>)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	3301      	adds	r3, #1
 8000560:	b299      	uxth	r1, r3
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800056a:	897b      	ldrh	r3, [r7, #10]
 800056c:	085b      	lsrs	r3, r3, #1
 800056e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	ddbc      	ble.n	80004f6 <button_Scan+0x36>
	  }
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00
 800058c:	2000003c 	.word	0x2000003c
 8000590:	2000011c 	.word	0x2000011c
 8000594:	20000070 	.word	0x20000070

08000598 <isButton1Pressed>:

int isButton1Pressed() {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	if(button_count[0] == 1) {
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <isButton1Pressed+0x1c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d101      	bne.n	80005a8 <isButton1Pressed+0x10>
//		button1_flag = 0;
		return 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <isButton1Pressed+0x12>
	}
	return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000070 	.word	0x20000070

080005b8 <isButton2Pressed>:
			}
		}
	}
}

int isButton2Pressed() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	if(button_count[1] == 1) {
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <isButton2Pressed+0x1c>)
 80005be:	885b      	ldrh	r3, [r3, #2]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d101      	bne.n	80005c8 <isButton2Pressed+0x10>
//		button_count[1] = 0;
		return 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <isButton2Pressed+0x12>
	}
	return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000070 	.word	0x20000070

080005d8 <isButton3Pressed>:
			}
		}
	}
}

int isButton3Pressed() {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	if(button_count[2] == 1) {
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <isButton3Pressed+0x1c>)
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d101      	bne.n	80005e8 <isButton3Pressed+0x10>
//		button_count[2] = 0;
		return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <isButton3Pressed+0x12>
	}
	return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	20000070 	.word	0x20000070

080005f8 <fsm_automatic_run>:
 */
#include <fsm_automatic.h>

int color = INIT;

void fsm_automatic_run() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
	switch (color) {
 80005fe:	4b83      	ldr	r3, [pc, #524]	; (800080c <fsm_automatic_run+0x214>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	2b03      	cmp	r3, #3
 8000606:	f200 80f7 	bhi.w	80007f8 <fsm_automatic_run+0x200>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <fsm_automatic_run+0x18>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	0800063b 	.word	0x0800063b
 8000618:	08000707 	.word	0x08000707
 800061c:	0800077d 	.word	0x0800077d
		case INIT:
			lcd_Clear(WHITE);
 8000620:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000624:	f000 fc3a 	bl	8000e9c <lcd_Clear>
			color = R;
 8000628:	4b78      	ldr	r3, [pc, #480]	; (800080c <fsm_automatic_run+0x214>)
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
			setTimer1(red_duration);
 800062e:	4b78      	ldr	r3, [pc, #480]	; (8000810 <fsm_automatic_run+0x218>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fb7e 	bl	8001d34 <setTimer1>
			break;
 8000638:	e0e5      	b.n	8000806 <fsm_automatic_run+0x20e>
		case R:
			display_time();
 800063a:	f001 f88f 	bl	800175c <display_time>
			setColorHorizontal(RED, YELLOW, GREEN, 1, 0, 0);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800064c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000650:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000654:	f001 fd60 	bl	8002118 <setColorHorizontal>
			if (isTimer1Paused(red_duration - green_duration)) {
 8000658:	4b6d      	ldr	r3, [pc, #436]	; (8000810 <fsm_automatic_run+0x218>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b6d      	ldr	r3, [pc, #436]	; (8000814 <fsm_automatic_run+0x21c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fba2 	bl	8001dac <isTimer1Paused>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d01b      	beq.n	80006a6 <fsm_automatic_run+0xae>
				display_num('B', (timer1_counter + 1000)/1000);
 800066e:	4b6a      	ldr	r3, [pc, #424]	; (8000818 <fsm_automatic_run+0x220>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000676:	4a69      	ldr	r2, [pc, #420]	; (800081c <fsm_automatic_run+0x224>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1192      	asrs	r2, r2, #6
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4619      	mov	r1, r3
 8000684:	2042      	movs	r0, #66	; 0x42
 8000686:	f001 f838 	bl	80016fa <display_num>
				setColorVertical(RED, YELLOW, GREEN, 0, 1, 0);
 800068a:	2300      	movs	r3, #0
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000698:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800069c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006a0:	f001 fd14 	bl	80020cc <setColorVertical>
 80006a4:	e01d      	b.n	80006e2 <fsm_automatic_run+0xea>
			}
			else {
				display_num('B', (timer1_counter + 1000 - amber_duration)/1000);
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <fsm_automatic_run+0x220>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <fsm_automatic_run+0x228>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a59      	ldr	r2, [pc, #356]	; (800081c <fsm_automatic_run+0x224>)
 80006b6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ba:	1192      	asrs	r2, r2, #6
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	2042      	movs	r0, #66	; 0x42
 80006c4:	f001 f819 	bl	80016fa <display_num>
				setColorVertical(RED, YELLOW, GREEN, 0, 0, 1);
 80006c8:	2301      	movs	r3, #1
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2300      	movs	r3, #0
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80006d6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80006da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006de:	f001 fcf5 	bl	80020cc <setColorVertical>
			}

			if (timer1_flag == 1) {
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <fsm_automatic_run+0x22c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	f040 8088 	bne.w	80007fc <fsm_automatic_run+0x204>
				lcd_Clear(WHITE);
 80006ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f0:	f000 fbd4 	bl	8000e9c <lcd_Clear>
				color = GR;
 80006f4:	4b45      	ldr	r3, [pc, #276]	; (800080c <fsm_automatic_run+0x214>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	601a      	str	r2, [r3, #0]
				setTimer1(green_duration);
 80006fa:	4b46      	ldr	r3, [pc, #280]	; (8000814 <fsm_automatic_run+0x21c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fb18 	bl	8001d34 <setTimer1>
			}
			break;
 8000704:	e07a      	b.n	80007fc <fsm_automatic_run+0x204>
		case Y:
			display_time();
 8000706:	f001 f829 	bl	800175c <display_time>
			setColorHorizontal(RED, YELLOW, GREEN, 0, 1, 0);
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2301      	movs	r3, #1
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000718:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800071c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000720:	f001 fcfa 	bl	8002118 <setColorHorizontal>
			display_num('B', (timer1_counter + 1000)/1000);
 8000724:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <fsm_automatic_run+0x220>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800072c:	4a3b      	ldr	r2, [pc, #236]	; (800081c <fsm_automatic_run+0x224>)
 800072e:	fb82 1203 	smull	r1, r2, r2, r3
 8000732:	1192      	asrs	r2, r2, #6
 8000734:	17db      	asrs	r3, r3, #31
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	4619      	mov	r1, r3
 800073a:	2042      	movs	r0, #66	; 0x42
 800073c:	f000 ffdd 	bl	80016fa <display_num>
			setColorVertical(RED, YELLOW, GREEN, 1, 0, 0);
 8000740:	2300      	movs	r3, #0
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	2300      	movs	r3, #0
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800074e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000752:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000756:	f001 fcb9 	bl	80020cc <setColorVertical>

			if (timer1_flag == 1) {
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <fsm_automatic_run+0x22c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d14e      	bne.n	8000800 <fsm_automatic_run+0x208>
				lcd_Clear(WHITE);
 8000762:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000766:	f000 fb99 	bl	8000e9c <lcd_Clear>
				color = R;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <fsm_automatic_run+0x214>)
 800076c:	2202      	movs	r2, #2
 800076e:	601a      	str	r2, [r3, #0]
				setTimer1(red_duration);
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <fsm_automatic_run+0x218>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fadd 	bl	8001d34 <setTimer1>
			}
			break;
 800077a:	e041      	b.n	8000800 <fsm_automatic_run+0x208>
		case GR:
			display_time();
 800077c:	f000 ffee 	bl	800175c <display_time>
			setColorHorizontal(RED, YELLOW, GREEN, 0, 0, 1);
 8000780:	2301      	movs	r3, #1
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2300      	movs	r3, #0
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800078e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000792:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000796:	f001 fcbf 	bl	8002118 <setColorHorizontal>
			display_num('B', (timer1_counter + 1000 + amber_duration)/1000);
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <fsm_automatic_run+0x220>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <fsm_automatic_run+0x228>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <fsm_automatic_run+0x224>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	1192      	asrs	r2, r2, #6
 80007b0:	17db      	asrs	r3, r3, #31
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	2042      	movs	r0, #66	; 0x42
 80007b8:	f000 ff9f 	bl	80016fa <display_num>
			setColorVertical(RED, YELLOW, GREEN, 1, 0, 0);
 80007bc:	2300      	movs	r3, #0
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2300      	movs	r3, #0
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007ca:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80007ce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80007d2:	f001 fc7b 	bl	80020cc <setColorVertical>

			if (timer1_flag == 1) {
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <fsm_automatic_run+0x22c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d112      	bne.n	8000804 <fsm_automatic_run+0x20c>
				lcd_Clear(WHITE);
 80007de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007e2:	f000 fb5b 	bl	8000e9c <lcd_Clear>
				color = Y;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <fsm_automatic_run+0x214>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	601a      	str	r2, [r3, #0]
				setTimer1(amber_duration);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <fsm_automatic_run+0x228>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fa9f 	bl	8001d34 <setTimer1>
			}
			break;
 80007f6:	e005      	b.n	8000804 <fsm_automatic_run+0x20c>
		default:
			break;
 80007f8:	bf00      	nop
 80007fa:	e004      	b.n	8000806 <fsm_automatic_run+0x20e>
			break;
 80007fc:	bf00      	nop
 80007fe:	e002      	b.n	8000806 <fsm_automatic_run+0x20e>
			break;
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <fsm_automatic_run+0x20e>
			break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000008 	.word	0x20000008
 8000814:	20000010 	.word	0x20000010
 8000818:	20000050 	.word	0x20000050
 800081c:	10624dd3 	.word	0x10624dd3
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000054 	.word	0x20000054

08000828 <fsm_manual_run>:
int amber_duration = 2000;
int amber_duration_temp = 0;
int green_duration = 3000;
int green_duration_temp = 0;
int toggle_flag = 0;
void fsm_manual_run() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af02      	add	r7, sp, #8
	switch(status) {
 800082e:	4bb0      	ldr	r3, [pc, #704]	; (8000af0 <fsm_manual_run+0x2c8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b04      	cmp	r3, #4
 8000834:	f200 828f 	bhi.w	8000d56 <fsm_manual_run+0x52e>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <fsm_manual_run+0x18>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	0800086d 	.word	0x0800086d
 8000844:	08000855 	.word	0x08000855
 8000848:	0800088f 	.word	0x0800088f
 800084c:	08000a1d 	.word	0x08000a1d
 8000850:	08000bd5 	.word	0x08000bd5
		case NORMAL:
			fsm_automatic_run();
 8000854:	f7ff fed0 	bl	80005f8 <fsm_automatic_run>

			if (isButton1Pressed()) {
 8000858:	f7ff fe9e 	bl	8000598 <isButton1Pressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 827b 	beq.w	8000d5a <fsm_manual_run+0x532>
				status = INITIAL;
 8000864:	4ba2      	ldr	r3, [pc, #648]	; (8000af0 <fsm_manual_run+0x2c8>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			}
			break;
 800086a:	e276      	b.n	8000d5a <fsm_manual_run+0x532>
		case INITIAL:
			lcd_Clear(WHITE);
 800086c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000870:	f000 fb14 	bl	8000e9c <lcd_Clear>
//			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
//			setColor(GPIOB, SEG_6_Pin, SEG_A_Pin, SEG_B_Pin, OFF, OFF, OFF);
//			setColor(GPIOB, SEG_C_Pin, SEG_D_Pin, SEG_E_Pin, OFF, OFF, OFF);
//			setColor(GPIOB, SEG_F_Pin, SEG_G_Pin, SEG_G_Pin, OFF, OFF, OFF);

			status = MODIFY_RED;
 8000874:	4b9e      	ldr	r3, [pc, #632]	; (8000af0 <fsm_manual_run+0x2c8>)
 8000876:	2202      	movs	r2, #2
 8000878:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 800087a:	20fa      	movs	r0, #250	; 0xfa
 800087c:	f001 fa82 	bl	8001d84 <setTimer3>
			setTimer2(147);
 8000880:	2093      	movs	r0, #147	; 0x93
 8000882:	f001 fa6b 	bl	8001d5c <setTimer2>
			setTimer1(153);
 8000886:	2099      	movs	r0, #153	; 0x99
 8000888:	f001 fa54 	bl	8001d34 <setTimer1>
			break;
 800088c:	e26c      	b.n	8000d68 <fsm_manual_run+0x540>
		case MODIFY_RED:
			// Vertical
				lcd_DrawCircle(180, 170, GREEN, 20, 0);
 800088e:	2300      	movs	r3, #0
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2314      	movs	r3, #20
 8000894:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000898:	21aa      	movs	r1, #170	; 0xaa
 800089a:	20b4      	movs	r0, #180	; 0xb4
 800089c:	f000 fec1 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(180, 220, YELLOW, 20, 0);
 80008a0:	2300      	movs	r3, #0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2314      	movs	r3, #20
 80008a6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008aa:	21dc      	movs	r1, #220	; 0xdc
 80008ac:	20b4      	movs	r0, #180	; 0xb4
 80008ae:	f000 feb8 	bl	8001622 <lcd_DrawCircle>

				// Horizontal
				lcd_DrawCircle(70, 60, GREEN, 20, 0);
 80008b2:	2300      	movs	r3, #0
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2314      	movs	r3, #20
 80008b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008bc:	213c      	movs	r1, #60	; 0x3c
 80008be:	2046      	movs	r0, #70	; 0x46
 80008c0:	f000 feaf 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(20, 60, YELLOW, 20, 0);
 80008c4:	2300      	movs	r3, #0
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2314      	movs	r3, #20
 80008ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008ce:	213c      	movs	r1, #60	; 0x3c
 80008d0:	2014      	movs	r0, #20
 80008d2:	f000 fea6 	bl	8001622 <lcd_DrawCircle>

			if (timer1_flag == 1) {
 80008d6:	4b87      	ldr	r3, [pc, #540]	; (8000af4 <fsm_manual_run+0x2cc>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10e      	bne.n	80008fc <fsm_manual_run+0xd4>
				setTimer1(153);
 80008de:	2099      	movs	r0, #153	; 0x99
 80008e0:	f001 fa28 	bl	8001d34 <setTimer1>
				display_num('A', (red_duration)/1000);
 80008e4:	4b84      	ldr	r3, [pc, #528]	; (8000af8 <fsm_manual_run+0x2d0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a84      	ldr	r2, [pc, #528]	; (8000afc <fsm_manual_run+0x2d4>)
 80008ea:	fb82 1203 	smull	r1, r2, r2, r3
 80008ee:	1192      	asrs	r2, r2, #6
 80008f0:	17db      	asrs	r3, r3, #31
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	2041      	movs	r0, #65	; 0x41
 80008f8:	f000 feff 	bl	80016fa <display_num>
			}

			if (timer2_flag == 1) { // B mode, A value
 80008fc:	4b80      	ldr	r3, [pc, #512]	; (8000b00 <fsm_manual_run+0x2d8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d106      	bne.n	8000912 <fsm_manual_run+0xea>
				setTimer2(147);
 8000904:	2093      	movs	r0, #147	; 0x93
 8000906:	f001 fa29 	bl	8001d5c <setTimer2>
				display_num('B', MODIFY_RED);
 800090a:	2102      	movs	r1, #2
 800090c:	2042      	movs	r0, #66	; 0x42
 800090e:	f000 fef4 	bl	80016fa <display_num>
			}

			if (timer3_flag == 1 && toggle_flag == 0) {
 8000912:	4b7c      	ldr	r3, [pc, #496]	; (8000b04 <fsm_manual_run+0x2dc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d122      	bne.n	8000960 <fsm_manual_run+0x138>
 800091a:	4b7b      	ldr	r3, [pc, #492]	; (8000b08 <fsm_manual_run+0x2e0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11e      	bne.n	8000960 <fsm_manual_run+0x138>
				setTimer3(250);
 8000922:	20fa      	movs	r0, #250	; 0xfa
 8000924:	f001 fa2e 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000928:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800092c:	f000 fab6 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(120, 60, RED, 20, toggle_flag);
 8000930:	4b75      	ldr	r3, [pc, #468]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2314      	movs	r3, #20
 8000938:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800093c:	213c      	movs	r1, #60	; 0x3c
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f000 fe6f 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(180, 120, RED, 20, toggle_flag);
 8000944:	4b70      	ldr	r3, [pc, #448]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2314      	movs	r3, #20
 800094c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000950:	2178      	movs	r1, #120	; 0x78
 8000952:	20b4      	movs	r0, #180	; 0xb4
 8000954:	f000 fe65 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 1;
 8000958:	4b6b      	ldr	r3, [pc, #428]	; (8000b08 <fsm_manual_run+0x2e0>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e025      	b.n	80009ac <fsm_manual_run+0x184>
			}
			else if (timer3_flag == 1 && toggle_flag == 1) {
 8000960:	4b68      	ldr	r3, [pc, #416]	; (8000b04 <fsm_manual_run+0x2dc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d121      	bne.n	80009ac <fsm_manual_run+0x184>
 8000968:	4b67      	ldr	r3, [pc, #412]	; (8000b08 <fsm_manual_run+0x2e0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d11d      	bne.n	80009ac <fsm_manual_run+0x184>
				setTimer3(250);
 8000970:	20fa      	movs	r0, #250	; 0xfa
 8000972:	f001 fa07 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000976:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800097a:	f000 fa8f 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(120, 60, RED, 20, toggle_flag);
 800097e:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2314      	movs	r3, #20
 8000986:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800098a:	213c      	movs	r1, #60	; 0x3c
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fe48 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(180, 120, RED, 20, toggle_flag);
 8000992:	4b5d      	ldr	r3, [pc, #372]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2314      	movs	r3, #20
 800099a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800099e:	2178      	movs	r1, #120	; 0x78
 80009a0:	20b4      	movs	r0, #180	; 0xb4
 80009a2:	f000 fe3e 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 0;
 80009a6:	4b58      	ldr	r3, [pc, #352]	; (8000b08 <fsm_manual_run+0x2e0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
			}

			if(isButton3Pressed()) red_duration = red_duration;
 80009ac:	f7ff fe14 	bl	80005d8 <isButton3Pressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <fsm_manual_run+0x196>
 80009b6:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a4f      	ldr	r2, [pc, #316]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009bc:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 80009be:	f7ff fdfb 	bl	80005b8 <isButton2Pressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d012      	beq.n	80009ee <fsm_manual_run+0x1c6>
				red_duration_temp = red_duration;
 80009c8:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a4f      	ldr	r2, [pc, #316]	; (8000b0c <fsm_manual_run+0x2e4>)
 80009ce:	6013      	str	r3, [r2, #0]
				red_duration = red_duration + 1000;
 80009d0:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009d8:	4a47      	ldr	r2, [pc, #284]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009da:	6013      	str	r3, [r2, #0]
				if (red_duration > 99000) red_duration = 1000;
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a4b      	ldr	r2, [pc, #300]	; (8000b10 <fsm_manual_run+0x2e8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	dd03      	ble.n	80009ee <fsm_manual_run+0x1c6>
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <fsm_manual_run+0x2d0>)
 80009e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ec:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 80009ee:	f7ff fdd3 	bl	8000598 <isButton1Pressed>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 81b2 	beq.w	8000d5e <fsm_manual_run+0x536>
				lcd_Clear(WHITE);
 80009fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009fe:	f000 fa4d 	bl	8000e9c <lcd_Clear>
				status = MODIFY_AMBER;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <fsm_manual_run+0x2c8>)
 8000a04:	2203      	movs	r2, #3
 8000a06:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000a08:	20fa      	movs	r0, #250	; 0xfa
 8000a0a:	f001 f9bb 	bl	8001d84 <setTimer3>
				setTimer2(147);
 8000a0e:	2093      	movs	r0, #147	; 0x93
 8000a10:	f001 f9a4 	bl	8001d5c <setTimer2>
				setTimer1(153);
 8000a14:	2099      	movs	r0, #153	; 0x99
 8000a16:	f001 f98d 	bl	8001d34 <setTimer1>
			}
			break;
 8000a1a:	e1a0      	b.n	8000d5e <fsm_manual_run+0x536>
		case MODIFY_AMBER:
			// Vertical
				lcd_DrawCircle(180, 120, RED, 20, 0);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2314      	movs	r3, #20
 8000a22:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a26:	2178      	movs	r1, #120	; 0x78
 8000a28:	20b4      	movs	r0, #180	; 0xb4
 8000a2a:	f000 fdfa 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(180, 170, GREEN, 20, 0);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2314      	movs	r3, #20
 8000a34:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a38:	21aa      	movs	r1, #170	; 0xaa
 8000a3a:	20b4      	movs	r0, #180	; 0xb4
 8000a3c:	f000 fdf1 	bl	8001622 <lcd_DrawCircle>

				// Horizontal
				lcd_DrawCircle(120, 60, RED, 20, 0);
 8000a40:	2300      	movs	r3, #0
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2314      	movs	r3, #20
 8000a46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a4a:	213c      	movs	r1, #60	; 0x3c
 8000a4c:	2078      	movs	r0, #120	; 0x78
 8000a4e:	f000 fde8 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(70, 60, GREEN, 20, 0);
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2314      	movs	r3, #20
 8000a58:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a5c:	213c      	movs	r1, #60	; 0x3c
 8000a5e:	2046      	movs	r0, #70	; 0x46
 8000a60:	f000 fddf 	bl	8001622 <lcd_DrawCircle>

			if (timer1_flag == 1) {
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <fsm_manual_run+0x2cc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10e      	bne.n	8000a8a <fsm_manual_run+0x262>
				setTimer1(153);
 8000a6c:	2099      	movs	r0, #153	; 0x99
 8000a6e:	f001 f961 	bl	8001d34 <setTimer1>
				display_num('A', (amber_duration)/1000);
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <fsm_manual_run+0x2ec>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <fsm_manual_run+0x2d4>)
 8000a78:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7c:	1192      	asrs	r2, r2, #6
 8000a7e:	17db      	asrs	r3, r3, #31
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	2041      	movs	r0, #65	; 0x41
 8000a86:	f000 fe38 	bl	80016fa <display_num>
			}

			if (timer2_flag == 1) { // B mode, A value
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <fsm_manual_run+0x2d8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d106      	bne.n	8000aa0 <fsm_manual_run+0x278>
				setTimer2(147);
 8000a92:	2093      	movs	r0, #147	; 0x93
 8000a94:	f001 f962 	bl	8001d5c <setTimer2>
				display_num('B', MODIFY_AMBER);
 8000a98:	2103      	movs	r1, #3
 8000a9a:	2042      	movs	r0, #66	; 0x42
 8000a9c:	f000 fe2d 	bl	80016fa <display_num>
			}

//			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
//			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);

			if (timer3_flag == 1 && toggle_flag == 0) {
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <fsm_manual_run+0x2dc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d137      	bne.n	8000b18 <fsm_manual_run+0x2f0>
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d133      	bne.n	8000b18 <fsm_manual_run+0x2f0>
				setTimer3(250);
 8000ab0:	20fa      	movs	r0, #250	; 0xfa
 8000ab2:	f001 f967 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000ab6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000aba:	f000 f9ef 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(180, 220, YELLOW, 20, toggle_flag);
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000aca:	21dc      	movs	r1, #220	; 0xdc
 8000acc:	20b4      	movs	r0, #180	; 0xb4
 8000ace:	f000 fda8 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(20, 60, YELLOW, 20, toggle_flag);
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2314      	movs	r3, #20
 8000ada:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000ade:	213c      	movs	r1, #60	; 0x3c
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	f000 fd9e 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 1;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <fsm_manual_run+0x2e0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e03a      	b.n	8000b64 <fsm_manual_run+0x33c>
 8000aee:	bf00      	nop
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000054 	.word	0x20000054
 8000af8:	20000008 	.word	0x20000008
 8000afc:	10624dd3 	.word	0x10624dd3
 8000b00:	2000005c 	.word	0x2000005c
 8000b04:	20000064 	.word	0x20000064
 8000b08:	2000004c 	.word	0x2000004c
 8000b0c:	20000040 	.word	0x20000040
 8000b10:	000182b8 	.word	0x000182b8
 8000b14:	2000000c 	.word	0x2000000c
			}
			else if (timer3_flag == 1 && toggle_flag == 1) {
 8000b18:	4b95      	ldr	r3, [pc, #596]	; (8000d70 <fsm_manual_run+0x548>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d121      	bne.n	8000b64 <fsm_manual_run+0x33c>
 8000b20:	4b94      	ldr	r3, [pc, #592]	; (8000d74 <fsm_manual_run+0x54c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d11d      	bne.n	8000b64 <fsm_manual_run+0x33c>
				setTimer3(250);
 8000b28:	20fa      	movs	r0, #250	; 0xfa
 8000b2a:	f001 f92b 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000b2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b32:	f000 f9b3 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(180, 220, YELLOW, 20, toggle_flag);
 8000b36:	4b8f      	ldr	r3, [pc, #572]	; (8000d74 <fsm_manual_run+0x54c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b42:	21dc      	movs	r1, #220	; 0xdc
 8000b44:	20b4      	movs	r0, #180	; 0xb4
 8000b46:	f000 fd6c 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(20, 60, YELLOW, 20, toggle_flag);
 8000b4a:	4b8a      	ldr	r3, [pc, #552]	; (8000d74 <fsm_manual_run+0x54c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2314      	movs	r3, #20
 8000b52:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b56:	213c      	movs	r1, #60	; 0x3c
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f000 fd62 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 0;
 8000b5e:	4b85      	ldr	r3, [pc, #532]	; (8000d74 <fsm_manual_run+0x54c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			}

			if(isButton3Pressed()) amber_duration = amber_duration;
 8000b64:	f7ff fd38 	bl	80005d8 <isButton3Pressed>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <fsm_manual_run+0x34e>
 8000b6e:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <fsm_manual_run+0x550>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <fsm_manual_run+0x550>)
 8000b74:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 8000b76:	f7ff fd1f 	bl	80005b8 <isButton2Pressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d012      	beq.n	8000ba6 <fsm_manual_run+0x37e>
				amber_duration_temp = amber_duration;
 8000b80:	4b7d      	ldr	r3, [pc, #500]	; (8000d78 <fsm_manual_run+0x550>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a7d      	ldr	r2, [pc, #500]	; (8000d7c <fsm_manual_run+0x554>)
 8000b86:	6013      	str	r3, [r2, #0]
				amber_duration = amber_duration + 1000;
 8000b88:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <fsm_manual_run+0x550>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b90:	4a79      	ldr	r2, [pc, #484]	; (8000d78 <fsm_manual_run+0x550>)
 8000b92:	6013      	str	r3, [r2, #0]
				if (amber_duration > 99000) amber_duration = 1000;
 8000b94:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <fsm_manual_run+0x550>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a79      	ldr	r2, [pc, #484]	; (8000d80 <fsm_manual_run+0x558>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	dd03      	ble.n	8000ba6 <fsm_manual_run+0x37e>
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <fsm_manual_run+0x550>)
 8000ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba4:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000ba6:	f7ff fcf7 	bl	8000598 <isButton1Pressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80d8 	beq.w	8000d62 <fsm_manual_run+0x53a>
				lcd_Clear(WHITE);
 8000bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bb6:	f000 f971 	bl	8000e9c <lcd_Clear>
				status = MODIFY_GREEN;
 8000bba:	4b72      	ldr	r3, [pc, #456]	; (8000d84 <fsm_manual_run+0x55c>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000bc0:	20fa      	movs	r0, #250	; 0xfa
 8000bc2:	f001 f8df 	bl	8001d84 <setTimer3>
				setTimer2(147);
 8000bc6:	2093      	movs	r0, #147	; 0x93
 8000bc8:	f001 f8c8 	bl	8001d5c <setTimer2>
				setTimer1(153);
 8000bcc:	2099      	movs	r0, #153	; 0x99
 8000bce:	f001 f8b1 	bl	8001d34 <setTimer1>
			}
			break;
 8000bd2:	e0c6      	b.n	8000d62 <fsm_manual_run+0x53a>
		case MODIFY_GREEN:
			// Vertical
				lcd_DrawCircle(180, 120, RED, 20, 0);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2314      	movs	r3, #20
 8000bda:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bde:	2178      	movs	r1, #120	; 0x78
 8000be0:	20b4      	movs	r0, #180	; 0xb4
 8000be2:	f000 fd1e 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(180, 220, YELLOW, 20, 0);
 8000be6:	2300      	movs	r3, #0
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2314      	movs	r3, #20
 8000bec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000bf0:	21dc      	movs	r1, #220	; 0xdc
 8000bf2:	20b4      	movs	r0, #180	; 0xb4
 8000bf4:	f000 fd15 	bl	8001622 <lcd_DrawCircle>

				// Horizontal
				lcd_DrawCircle(120, 60, RED, 20, 0);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c02:	213c      	movs	r1, #60	; 0x3c
 8000c04:	2078      	movs	r0, #120	; 0x78
 8000c06:	f000 fd0c 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(20, 60, YELLOW, 20, 0);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2314      	movs	r3, #20
 8000c10:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c14:	213c      	movs	r1, #60	; 0x3c
 8000c16:	2014      	movs	r0, #20
 8000c18:	f000 fd03 	bl	8001622 <lcd_DrawCircle>

			if (timer1_flag == 1) {
 8000c1c:	4b5a      	ldr	r3, [pc, #360]	; (8000d88 <fsm_manual_run+0x560>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10e      	bne.n	8000c42 <fsm_manual_run+0x41a>
				setTimer1(153);
 8000c24:	2099      	movs	r0, #153	; 0x99
 8000c26:	f001 f885 	bl	8001d34 <setTimer1>
				display_num('A', (green_duration)/1000);
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <fsm_manual_run+0x564>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a58      	ldr	r2, [pc, #352]	; (8000d90 <fsm_manual_run+0x568>)
 8000c30:	fb82 1203 	smull	r1, r2, r2, r3
 8000c34:	1192      	asrs	r2, r2, #6
 8000c36:	17db      	asrs	r3, r3, #31
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2041      	movs	r0, #65	; 0x41
 8000c3e:	f000 fd5c 	bl	80016fa <display_num>
			}
			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <fsm_manual_run+0x56c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10a      	bne.n	8000c60 <fsm_manual_run+0x438>
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <fsm_manual_run+0x570>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d106      	bne.n	8000c60 <fsm_manual_run+0x438>
				setTimer2(147);
 8000c52:	2093      	movs	r0, #147	; 0x93
 8000c54:	f001 f882 	bl	8001d5c <setTimer2>
				display_num('B', MODIFY_GREEN);
 8000c58:	2104      	movs	r1, #4
 8000c5a:	2042      	movs	r0, #66	; 0x42
 8000c5c:	f000 fd4d 	bl	80016fa <display_num>
			}

			if (timer3_flag == 1 && toggle_flag == 0) {
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <fsm_manual_run+0x548>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d122      	bne.n	8000cae <fsm_manual_run+0x486>
 8000c68:	4b42      	ldr	r3, [pc, #264]	; (8000d74 <fsm_manual_run+0x54c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11e      	bne.n	8000cae <fsm_manual_run+0x486>
				setTimer3(250);
 8000c70:	20fa      	movs	r0, #250	; 0xfa
 8000c72:	f001 f887 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c7a:	f000 f90f 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(180, 170, GREEN, 20, toggle_flag);
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <fsm_manual_run+0x54c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2314      	movs	r3, #20
 8000c86:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c8a:	21aa      	movs	r1, #170	; 0xaa
 8000c8c:	20b4      	movs	r0, #180	; 0xb4
 8000c8e:	f000 fcc8 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(70, 60, GREEN, 20, toggle_flag);
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <fsm_manual_run+0x54c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2314      	movs	r3, #20
 8000c9a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c9e:	213c      	movs	r1, #60	; 0x3c
 8000ca0:	2046      	movs	r0, #70	; 0x46
 8000ca2:	f000 fcbe 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 1;
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <fsm_manual_run+0x54c>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e025      	b.n	8000cfa <fsm_manual_run+0x4d2>
			}
			else if (timer3_flag == 1 && toggle_flag == 1) {
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <fsm_manual_run+0x548>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d121      	bne.n	8000cfa <fsm_manual_run+0x4d2>
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <fsm_manual_run+0x54c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d11d      	bne.n	8000cfa <fsm_manual_run+0x4d2>
				setTimer3(250);
 8000cbe:	20fa      	movs	r0, #250	; 0xfa
 8000cc0:	f001 f860 	bl	8001d84 <setTimer3>
				lcd_Clear(WHITE);
 8000cc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cc8:	f000 f8e8 	bl	8000e9c <lcd_Clear>
				lcd_DrawCircle(180, 170, GREEN, 20, toggle_flag);
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <fsm_manual_run+0x54c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cd8:	21aa      	movs	r1, #170	; 0xaa
 8000cda:	20b4      	movs	r0, #180	; 0xb4
 8000cdc:	f000 fca1 	bl	8001622 <lcd_DrawCircle>
				lcd_DrawCircle(70, 60, GREEN, 20, toggle_flag);
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <fsm_manual_run+0x54c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cec:	213c      	movs	r1, #60	; 0x3c
 8000cee:	2046      	movs	r0, #70	; 0x46
 8000cf0:	f000 fc97 	bl	8001622 <lcd_DrawCircle>
				toggle_flag = 0;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <fsm_manual_run+0x54c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
			}

			if(isButton3Pressed()) {
 8000cfa:	f7ff fc6d 	bl	80005d8 <isButton3Pressed>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <fsm_manual_run+0x4e4>
				green_duration = green_duration;
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <fsm_manual_run+0x564>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <fsm_manual_run+0x564>)
 8000d0a:	6013      	str	r3, [r2, #0]
			}

			if(isButton2Pressed()) {
 8000d0c:	f7ff fc54 	bl	80005b8 <isButton2Pressed>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d012      	beq.n	8000d3c <fsm_manual_run+0x514>
				green_duration_temp = green_duration;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <fsm_manual_run+0x564>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <fsm_manual_run+0x574>)
 8000d1c:	6013      	str	r3, [r2, #0]
				green_duration = green_duration + 1000;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <fsm_manual_run+0x564>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <fsm_manual_run+0x564>)
 8000d28:	6013      	str	r3, [r2, #0]
				if (green_duration > 99000) green_duration = 1000;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <fsm_manual_run+0x564>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <fsm_manual_run+0x558>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dd03      	ble.n	8000d3c <fsm_manual_run+0x514>
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <fsm_manual_run+0x564>)
 8000d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d3a:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000d3c:	f7ff fc2c 	bl	8000598 <isButton1Pressed>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00f      	beq.n	8000d66 <fsm_manual_run+0x53e>
				lcd_Clear(WHITE);
 8000d46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d4a:	f000 f8a7 	bl	8000e9c <lcd_Clear>
				status = NORMAL;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <fsm_manual_run+0x55c>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d54:	e007      	b.n	8000d66 <fsm_manual_run+0x53e>
		default:
			break;
 8000d56:	bf00      	nop
 8000d58:	e006      	b.n	8000d68 <fsm_manual_run+0x540>
			break;
 8000d5a:	bf00      	nop
 8000d5c:	e004      	b.n	8000d68 <fsm_manual_run+0x540>
			break;
 8000d5e:	bf00      	nop
 8000d60:	e002      	b.n	8000d68 <fsm_manual_run+0x540>
			break;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <fsm_manual_run+0x540>
			break;
 8000d66:	bf00      	nop
	}
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000064 	.word	0x20000064
 8000d74:	2000004c 	.word	0x2000004c
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000044 	.word	0x20000044
 8000d80:	000182b8 	.word	0x000182b8
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000054 	.word	0x20000054
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	10624dd3 	.word	0x10624dd3
 8000d94:	2000005c 	.word	0x2000005c
 8000d98:	20000068 	.word	0x20000068
 8000d9c:	20000048 	.word	0x20000048

08000da0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <LCD_WR_REG+0x1c>)
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	8013      	strh	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	600ffffe 	.word	0x600ffffe

08000dc0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <LCD_WR_DATA+0x1c>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	8053      	strh	r3, [r2, #2]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	600ffffe 	.word	0x600ffffe

08000de0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <LCD_RD_DATA+0x20>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	b29b      	uxth	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	600ffffe 	.word	0x600ffffe

08000e04 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	80fb      	strh	r3, [r7, #6]
 8000e16:	4603      	mov	r3, r0
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e22:	202a      	movs	r0, #42	; 0x2a
 8000e24:	f7ff ffbc 	bl	8000da0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ffc6 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffc0 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ffba 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffb4 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e58:	202b      	movs	r0, #43	; 0x2b
 8000e5a:	f7ff ffa1 	bl	8000da0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ffab 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffa5 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000e76:	883b      	ldrh	r3, [r7, #0]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff9f 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff99 	bl	8000dc0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000e8e:	202c      	movs	r0, #44	; 0x2c
 8000e90:	f7ff ff86 	bl	8000da0 <LCD_WR_REG>
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}

08000e9c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <lcd_Clear+0x60>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <lcd_Clear+0x60>)
 8000eb0:	885b      	ldrh	r3, [r3, #2]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff ffa3 	bl	8000e04 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	e011      	b.n	8000ee8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	81bb      	strh	r3, [r7, #12]
 8000ec8:	e006      	b.n	8000ed8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff77 	bl	8000dc0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	81bb      	strh	r3, [r7, #12]
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <lcd_Clear+0x60>)
 8000eda:	885b      	ldrh	r3, [r3, #2]
 8000edc:	89ba      	ldrh	r2, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3f3      	bcc.n	8000eca <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	81fb      	strh	r3, [r7, #14]
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <lcd_Clear+0x60>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	89fa      	ldrh	r2, [r7, #14]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3e8      	bcc.n	8000ec4 <lcd_Clear+0x28>
		}
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000090 	.word	0x20000090

08000f00 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	88b9      	ldrh	r1, [r7, #4]
 8000f18:	88f8      	ldrh	r0, [r7, #6]
 8000f1a:	f7ff ff73 	bl	8000e04 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff4d 	bl	8000dc0 <LCD_WR_DATA>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	70fb      	strb	r3, [r7, #3]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	fb12 f303 	smulbb	r3, r2, r3
 8000f86:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	3b20      	subs	r3, #32
 8000f8c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29c      	uxth	r4, r3
 8000f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	88b9      	ldrh	r1, [r7, #4]
 8000fae:	88f8      	ldrh	r0, [r7, #6]
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	f7ff ff27 	bl	8000e04 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	827b      	strh	r3, [r7, #18]
 8000fba:	e07a      	b.n	80010b2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d028      	beq.n	8001016 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000fc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d108      	bne.n	8000fde <lcd_ShowChar+0xae>
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	8a7b      	ldrh	r3, [r7, #18]
 8000fd0:	493c      	ldr	r1, [pc, #240]	; (80010c4 <lcd_ShowChar+0x194>)
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	440a      	add	r2, r1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	75fb      	strb	r3, [r7, #23]
 8000fdc:	e01b      	b.n	8001016 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe2:	2b18      	cmp	r3, #24
 8000fe4:	d10b      	bne.n	8000ffe <lcd_ShowChar+0xce>
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	8a79      	ldrh	r1, [r7, #18]
 8000fea:	4837      	ldr	r0, [pc, #220]	; (80010c8 <lcd_ShowChar+0x198>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4403      	add	r3, r0
 8000ff6:	440b      	add	r3, r1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	75fb      	strb	r3, [r7, #23]
 8000ffc:	e00b      	b.n	8001016 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001002:	2b20      	cmp	r3, #32
 8001004:	d15a      	bne.n	80010bc <lcd_ShowChar+0x18c>
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	8a7b      	ldrh	r3, [r7, #18]
 800100a:	4930      	ldr	r1, [pc, #192]	; (80010cc <lcd_ShowChar+0x19c>)
 800100c:	0192      	lsls	r2, r2, #6
 800100e:	440a      	add	r2, r1
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001016:	2300      	movs	r3, #0
 8001018:	75bb      	strb	r3, [r7, #22]
 800101a:	e044      	b.n	80010a6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800101c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001020:	2b00      	cmp	r3, #0
 8001022:	d120      	bne.n	8001066 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001024:	7dfa      	ldrb	r2, [r7, #23]
 8001026:	7dbb      	ldrb	r3, [r7, #22]
 8001028:	fa42 f303 	asr.w	r3, r2, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <lcd_ShowChar+0x10e>
 8001034:	883b      	ldrh	r3, [r7, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fec2 	bl	8000dc0 <LCD_WR_DATA>
 800103c:	e003      	b.n	8001046 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800103e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff febd 	bl	8000dc0 <LCD_WR_DATA>
				m++;
 8001046:	7d7b      	ldrb	r3, [r7, #21]
 8001048:	3301      	adds	r3, #1
 800104a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800104c:	7d7b      	ldrb	r3, [r7, #21]
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	fbb3 f1f2 	udiv	r1, r3, r2
 8001054:	fb02 f201 	mul.w	r2, r2, r1
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11f      	bne.n	80010a0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001060:	2300      	movs	r3, #0
 8001062:	757b      	strb	r3, [r7, #21]
					break;
 8001064:	e022      	b.n	80010ac <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001066:	7dfa      	ldrb	r2, [r7, #23]
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	fa42 f303 	asr.w	r3, r2, r3
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <lcd_ShowChar+0x152>
 8001076:	883a      	ldrh	r2, [r7, #0]
 8001078:	88b9      	ldrh	r1, [r7, #4]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff3f 	bl	8000f00 <lcd_DrawPoint>
				x++;
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	3301      	adds	r3, #1
 8001086:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	8a3b      	ldrh	r3, [r7, #16]
 800108c:	1ad2      	subs	r2, r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	429a      	cmp	r2, r3
 8001092:	d105      	bne.n	80010a0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001094:	8a3b      	ldrh	r3, [r7, #16]
 8001096:	80fb      	strh	r3, [r7, #6]
					y++;
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	80bb      	strh	r3, [r7, #4]
					break;
 800109e:	e005      	b.n	80010ac <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	3301      	adds	r3, #1
 80010a4:	75bb      	strb	r3, [r7, #22]
 80010a6:	7dbb      	ldrb	r3, [r7, #22]
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	d9b7      	bls.n	800101c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80010ac:	8a7b      	ldrh	r3, [r7, #18]
 80010ae:	3301      	adds	r3, #1
 80010b0:	827b      	strh	r3, [r7, #18]
 80010b2:	8a7a      	ldrh	r2, [r7, #18]
 80010b4:	89bb      	ldrh	r3, [r7, #12]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d380      	bcc.n	8000fbc <lcd_ShowChar+0x8c>
 80010ba:	e000      	b.n	80010be <lcd_ShowChar+0x18e>
		else return;
 80010bc:	bf00      	nop
				}
			}
		}
	}
}
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	08004568 	.word	0x08004568
 80010c8:	08004b58 	.word	0x08004b58
 80010cc:	08005d28 	.word	0x08005d28

080010d0 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80010e4:	e004      	b.n	80010f0 <mypow+0x20>
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	71ba      	strb	r2, [r7, #6]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f5      	bne.n	80010e6 <mypow+0x16>
	return result;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af04      	add	r7, sp, #16
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001126:	2300      	movs	r3, #0
 8001128:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800112a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e059      	b.n	80011ec <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001138:	887c      	ldrh	r4, [r7, #2]
 800113a:	787a      	ldrb	r2, [r7, #1]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3b01      	subs	r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	200a      	movs	r0, #10
 800114a:	f7ff ffc1 	bl	80010d0 <mypow>
 800114e:	4603      	mov	r3, r0
 8001150:	fbb4 f1f3 	udiv	r1, r4, r3
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <lcd_ShowIntNum+0xf8>)
 8001156:	fba3 2301 	umull	r2, r3, r3, r1
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	1aca      	subs	r2, r1, r3
 8001166:	4613      	mov	r3, r2
 8001168:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d121      	bne.n	80011b4 <lcd_ShowIntNum+0xac>
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	787b      	ldrb	r3, [r7, #1]
 8001174:	3b01      	subs	r3, #1
 8001176:	429a      	cmp	r2, r3
 8001178:	da1c      	bge.n	80011b4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d117      	bne.n	80011b0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	b29a      	uxth	r2, r3
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	b29b      	uxth	r3, r3
 8001188:	fb12 f303 	smulbb	r3, r2, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4413      	add	r3, r2
 8001192:	b298      	uxth	r0, r3
 8001194:	8c3a      	ldrh	r2, [r7, #32]
 8001196:	88b9      	ldrh	r1, [r7, #4]
 8001198:	2300      	movs	r3, #0
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4613      	mov	r3, r2
 80011a8:	2220      	movs	r2, #32
 80011aa:	f7ff fec1 	bl	8000f30 <lcd_ShowChar>
				continue;
 80011ae:	e01a      	b.n	80011e6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	fb12 f303 	smulbb	r3, r2, r3
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4413      	add	r3, r2
 80011c6:	b298      	uxth	r0, r3
 80011c8:	7b3b      	ldrb	r3, [r7, #12]
 80011ca:	3330      	adds	r3, #48	; 0x30
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	8c3c      	ldrh	r4, [r7, #32]
 80011d0:	88b9      	ldrh	r1, [r7, #4]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4623      	mov	r3, r4
 80011e2:	f7ff fea5 	bl	8000f30 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	787b      	ldrb	r3, [r7, #1]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3a1      	bcc.n	8001138 <lcd_ShowIntNum+0x30>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	cccccccd 	.word	0xcccccccd

08001204 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <lcd_SetDir+0x44>)
 8001220:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001224:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <lcd_SetDir+0x44>)
 8001228:	22f0      	movs	r2, #240	; 0xf0
 800122a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800122c:	e006      	b.n	800123c <lcd_SetDir+0x38>
		lcddev.width=240;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <lcd_SetDir+0x44>)
 8001230:	22f0      	movs	r2, #240	; 0xf0
 8001232:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <lcd_SetDir+0x44>)
 8001236:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800123a:	805a      	strh	r2, [r3, #2]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000090 	.word	0x20000090

0800124c <lcd_init>:


void lcd_init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001256:	48aa      	ldr	r0, [pc, #680]	; (8001500 <lcd_init+0x2b4>)
 8001258:	f001 faf2 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800125c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001260:	f001 f81c 	bl	800229c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	48a5      	ldr	r0, [pc, #660]	; (8001500 <lcd_init+0x2b4>)
 800126c:	f001 fae8 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001274:	f001 f812 	bl	800229c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff ffc3 	bl	8001204 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800127e:	20d3      	movs	r0, #211	; 0xd3
 8001280:	f7ff fd8e 	bl	8000da0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001284:	f7ff fdac 	bl	8000de0 <LCD_RD_DATA>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b9d      	ldr	r3, [pc, #628]	; (8001504 <lcd_init+0x2b8>)
 800128e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001290:	f7ff fda6 	bl	8000de0 <LCD_RD_DATA>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b9a      	ldr	r3, [pc, #616]	; (8001504 <lcd_init+0x2b8>)
 800129a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800129c:	f7ff fda0 	bl	8000de0 <LCD_RD_DATA>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b97      	ldr	r3, [pc, #604]	; (8001504 <lcd_init+0x2b8>)
 80012a6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80012a8:	4b96      	ldr	r3, [pc, #600]	; (8001504 <lcd_init+0x2b8>)
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b94      	ldr	r3, [pc, #592]	; (8001504 <lcd_init+0x2b8>)
 80012b2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80012b4:	f7ff fd94 	bl	8000de0 <LCD_RD_DATA>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b91      	ldr	r3, [pc, #580]	; (8001504 <lcd_init+0x2b8>)
 80012be:	889b      	ldrh	r3, [r3, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <lcd_init+0x2b8>)
 80012c6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80012c8:	20cf      	movs	r0, #207	; 0xcf
 80012ca:	f7ff fd69 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fd76 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80012d4:	20c1      	movs	r0, #193	; 0xc1
 80012d6:	f7ff fd73 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff fd70 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80012e0:	20ed      	movs	r0, #237	; 0xed
 80012e2:	f7ff fd5d 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80012e6:	2064      	movs	r0, #100	; 0x64
 80012e8:	f7ff fd6a 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fd67 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80012f2:	2012      	movs	r0, #18
 80012f4:	f7ff fd64 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80012f8:	2081      	movs	r0, #129	; 0x81
 80012fa:	f7ff fd61 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80012fe:	20e8      	movs	r0, #232	; 0xe8
 8001300:	f7ff fd4e 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001304:	2085      	movs	r0, #133	; 0x85
 8001306:	f7ff fd5b 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800130a:	2010      	movs	r0, #16
 800130c:	f7ff fd58 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001310:	207a      	movs	r0, #122	; 0x7a
 8001312:	f7ff fd55 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001316:	20cb      	movs	r0, #203	; 0xcb
 8001318:	f7ff fd42 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800131c:	2039      	movs	r0, #57	; 0x39
 800131e:	f7ff fd4f 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001322:	202c      	movs	r0, #44	; 0x2c
 8001324:	f7ff fd4c 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fd49 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800132e:	2034      	movs	r0, #52	; 0x34
 8001330:	f7ff fd46 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fd43 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800133a:	20f7      	movs	r0, #247	; 0xf7
 800133c:	f7ff fd30 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001340:	2020      	movs	r0, #32
 8001342:	f7ff fd3d 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001346:	20ea      	movs	r0, #234	; 0xea
 8001348:	f7ff fd2a 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fd37 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fd34 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001358:	20c0      	movs	r0, #192	; 0xc0
 800135a:	f7ff fd21 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800135e:	201b      	movs	r0, #27
 8001360:	f7ff fd2e 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001364:	20c1      	movs	r0, #193	; 0xc1
 8001366:	f7ff fd1b 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fd28 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001370:	20c5      	movs	r0, #197	; 0xc5
 8001372:	f7ff fd15 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001376:	2030      	movs	r0, #48	; 0x30
 8001378:	f7ff fd22 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	f7ff fd1f 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001382:	20c7      	movs	r0, #199	; 0xc7
 8001384:	f7ff fd0c 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001388:	20b7      	movs	r0, #183	; 0xb7
 800138a:	f7ff fd19 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800138e:	2036      	movs	r0, #54	; 0x36
 8001390:	f7ff fd06 	bl	8000da0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001394:	2008      	movs	r0, #8
 8001396:	f7ff fd13 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800139a:	203a      	movs	r0, #58	; 0x3a
 800139c:	f7ff fd00 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80013a0:	2055      	movs	r0, #85	; 0x55
 80013a2:	f7ff fd0d 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80013a6:	20b1      	movs	r0, #177	; 0xb1
 80013a8:	f7ff fcfa 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fd07 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80013b2:	201a      	movs	r0, #26
 80013b4:	f7ff fd04 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80013b8:	20b6      	movs	r0, #182	; 0xb6
 80013ba:	f7ff fcf1 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80013be:	200a      	movs	r0, #10
 80013c0:	f7ff fcfe 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80013c4:	20a2      	movs	r0, #162	; 0xa2
 80013c6:	f7ff fcfb 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80013ca:	20f2      	movs	r0, #242	; 0xf2
 80013cc:	f7ff fce8 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fcf5 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f7ff fce2 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fcef 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80013e2:	20e0      	movs	r0, #224	; 0xe0
 80013e4:	f7ff fcdc 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80013e8:	200f      	movs	r0, #15
 80013ea:	f7ff fce9 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80013ee:	202a      	movs	r0, #42	; 0x2a
 80013f0:	f7ff fce6 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80013f4:	2028      	movs	r0, #40	; 0x28
 80013f6:	f7ff fce3 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013fa:	2008      	movs	r0, #8
 80013fc:	f7ff fce0 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001400:	200e      	movs	r0, #14
 8001402:	f7ff fcdd 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001406:	2008      	movs	r0, #8
 8001408:	f7ff fcda 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800140c:	2054      	movs	r0, #84	; 0x54
 800140e:	f7ff fcd7 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001412:	20a9      	movs	r0, #169	; 0xa9
 8001414:	f7ff fcd4 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001418:	2043      	movs	r0, #67	; 0x43
 800141a:	f7ff fcd1 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800141e:	200a      	movs	r0, #10
 8001420:	f7ff fcce 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001424:	200f      	movs	r0, #15
 8001426:	f7ff fccb 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fcc8 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff fcc5 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fcc2 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fcbf 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001442:	20e1      	movs	r0, #225	; 0xe1
 8001444:	f7ff fcac 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fcb9 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800144e:	2015      	movs	r0, #21
 8001450:	f7ff fcb6 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001454:	2017      	movs	r0, #23
 8001456:	f7ff fcb3 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800145a:	2007      	movs	r0, #7
 800145c:	f7ff fcb0 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001460:	2011      	movs	r0, #17
 8001462:	f7ff fcad 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001466:	2006      	movs	r0, #6
 8001468:	f7ff fcaa 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800146c:	202b      	movs	r0, #43	; 0x2b
 800146e:	f7ff fca7 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001472:	2056      	movs	r0, #86	; 0x56
 8001474:	f7ff fca4 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001478:	203c      	movs	r0, #60	; 0x3c
 800147a:	f7ff fca1 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800147e:	2005      	movs	r0, #5
 8001480:	f7ff fc9e 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001484:	2010      	movs	r0, #16
 8001486:	f7ff fc9b 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800148a:	200f      	movs	r0, #15
 800148c:	f7ff fc98 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001490:	203f      	movs	r0, #63	; 0x3f
 8001492:	f7ff fc95 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001496:	203f      	movs	r0, #63	; 0x3f
 8001498:	f7ff fc92 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800149c:	200f      	movs	r0, #15
 800149e:	f7ff fc8f 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80014a2:	202b      	movs	r0, #43	; 0x2b
 80014a4:	f7ff fc7c 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fc89 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fc86 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fc83 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80014ba:	203f      	movs	r0, #63	; 0x3f
 80014bc:	f7ff fc80 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80014c0:	202a      	movs	r0, #42	; 0x2a
 80014c2:	f7ff fc6d 	bl	8000da0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fc7a 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fc77 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fc74 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80014d8:	20ef      	movs	r0, #239	; 0xef
 80014da:	f7ff fc71 	bl	8000dc0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80014de:	2011      	movs	r0, #17
 80014e0:	f7ff fc5e 	bl	8000da0 <LCD_WR_REG>
	HAL_Delay(120);
 80014e4:	2078      	movs	r0, #120	; 0x78
 80014e6:	f000 fed9 	bl	800229c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80014ea:	2029      	movs	r0, #41	; 0x29
 80014ec:	f7ff fc58 	bl	8000da0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <lcd_init+0x2bc>)
 80014f8:	f001 f9a2 	bl	8002840 <HAL_GPIO_WritePin>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020800 	.word	0x40020800
 8001504:	20000090 	.word	0x20000090
 8001508:	40020000 	.word	0x40020000

0800150c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b298      	uxth	r0, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	b29a      	uxth	r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	8b3a      	ldrh	r2, [r7, #24]
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fce3 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b29b      	uxth	r3, r3
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b298      	uxth	r0, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	b29a      	uxth	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	8b3a      	ldrh	r2, [r7, #24]
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fcd3 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b298      	uxth	r0, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	b29a      	uxth	r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	8b3a      	ldrh	r2, [r7, #24]
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fcc3 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	b29b      	uxth	r3, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b298      	uxth	r0, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	b29a      	uxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	8b3a      	ldrh	r2, [r7, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fcb3 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	b29a      	uxth	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b298      	uxth	r0, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	8b3a      	ldrh	r2, [r7, #24]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fca3 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b298      	uxth	r0, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	8b3a      	ldrh	r2, [r7, #24]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fc93 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b298      	uxth	r0, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fc83 	bl	8000f00 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b298      	uxth	r0, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b29b      	uxth	r3, r3
 8001612:	8b3a      	ldrh	r2, [r7, #24]
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fc73 	bl	8000f00 <lcd_DrawPoint>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af02      	add	r7, sp, #8
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	f1c3 0303 	rsb	r3, r3, #3
 8001642:	613b      	str	r3, [r7, #16]


	if (fill)
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	2b00      	cmp	r3, #0
 8001648:	d04f      	beq.n	80016ea <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800164a:	e029      	b.n	80016a0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ff55 	bl	800150c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	429a      	cmp	r2, r3
 800166e:	ddf0      	ble.n	8001652 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	da06      	bge.n	8001684 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	009a      	lsls	r2, r3, #2
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4413      	add	r3, r2
 800167e:	3306      	adds	r3, #6
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	e00a      	b.n	800169a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	009a      	lsls	r2, r3, #2
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4413      	add	r3, r2
 8001690:	330a      	adds	r3, #10
 8001692:	613b      	str	r3, [r7, #16]
				y--;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	3b01      	subs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	ddd1      	ble.n	800164c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80016a8:	e023      	b.n	80016f2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ff29 	bl	800150c <_draw_circle_8>
			if (d < 0) {
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da06      	bge.n	80016ce <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	009a      	lsls	r2, r3, #2
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4413      	add	r3, r2
 80016c8:	3306      	adds	r3, #6
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e00a      	b.n	80016e4 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	009a      	lsls	r2, r3, #2
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4413      	add	r3, r2
 80016da:	330a      	adds	r3, #10
 80016dc:	613b      	str	r3, [r7, #16]
				y--;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
			x++;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dddb      	ble.n	80016aa <lcd_DrawCircle+0x88>
}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <display_num>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "led7_segment.h"

void display_num (char group, int num) {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af04      	add	r7, sp, #16
 8001700:	4603      	mov	r3, r0
 8001702:	6039      	str	r1, [r7, #0]
 8001704:	71fb      	strb	r3, [r7, #7]
	if (group == 'A') {
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b41      	cmp	r3, #65	; 0x41
 800170a:	d110      	bne.n	800172e <display_num+0x34>
		lcd_ShowIntNum(20, 280, num, 2, BRED, WHITE, 32);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b29a      	uxth	r2, r3
 8001710:	2320      	movs	r3, #32
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2302      	movs	r3, #2
 8001722:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001726:	2014      	movs	r0, #20
 8001728:	f7ff fcee 	bl	8001108 <lcd_ShowIntNum>
	}
	else if (group == 'B') {
		lcd_ShowIntNum(180, 280, num, 2, BRED, WHITE, 32);
//		select_num('B', num);
	}
}
 800172c:	e012      	b.n	8001754 <display_num+0x5a>
	else if (group == 'B') {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b42      	cmp	r3, #66	; 0x42
 8001732:	d10f      	bne.n	8001754 <display_num+0x5a>
		lcd_ShowIntNum(180, 280, num, 2, BRED, WHITE, 32);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2320      	movs	r3, #32
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800174e:	20b4      	movs	r0, #180	; 0xb4
 8001750:	f7ff fcda 	bl	8001108 <lcd_ShowIntNum>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <display_time>:

void display_time() {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <display_time+0x34>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d110      	bne.n	800178a <display_time+0x2e>
		setTimer2(147);
 8001768:	2093      	movs	r0, #147	; 0x93
 800176a:	f000 faf7 	bl	8001d5c <setTimer2>
		display_num('A', (timer1_counter + 1000)/1000);
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <display_time+0x38>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <display_time+0x3c>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1192      	asrs	r2, r2, #6
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4619      	mov	r1, r3
 8001784:	2041      	movs	r0, #65	; 0x41
 8001786:	f7ff ffb8 	bl	80016fa <display_num>
	}
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000005c 	.word	0x2000005c
 8001794:	20000050 	.word	0x20000050
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fd0a 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f81a 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f000 f904 	bl	80019b4 <MX_GPIO_Init>
  MX_FSMC_Init();
 80017ac:	f000 f9fc 	bl	8001ba8 <MX_FSMC_Init>
  MX_TIM2_Init();
 80017b0:	f000 f8b4 	bl	800191c <MX_TIM2_Init>
  MX_SPI1_Init();
 80017b4:	f000 f87c 	bl	80018b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <main+0x3c>)
 80017ba:	f002 f99b 	bl	8003af4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80017be:	f7ff fd45 	bl	800124c <lcd_init>
  lcd_Clear(WHITE);
 80017c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c6:	f7ff fb69 	bl	8000e9c <lcd_Clear>
  test_lcd();
 80017ca:	f000 fa67 	bl	8001c9c <test_lcd>
  while (1)
  {
	  button_Scan();
 80017ce:	f7fe fe77 	bl	80004c0 <button_Scan>
	  fsm_manual_run();
 80017d2:	f7ff f829 	bl	8000828 <fsm_manual_run>
	  button_Scan();
 80017d6:	e7fa      	b.n	80017ce <main+0x32>
 80017d8:	20000174 	.word	0x20000174

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fea8 	bl	8004540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <SystemClock_Config+0xcc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <SystemClock_Config+0xcc>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <SystemClock_Config+0xd0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a21      	ldr	r2, [pc, #132]	; (80018ac <SystemClock_Config+0xd0>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001840:	2310      	movs	r3, #16
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001844:	2302      	movs	r3, #2
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800184c:	2308      	movs	r3, #8
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001850:	23a8      	movs	r3, #168	; 0xa8
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001858:	2304      	movs	r3, #4
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0320 	add.w	r3, r7, #32
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f807 	bl	8002874 <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800186c:	f000 fa5c 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2302      	movs	r3, #2
 8001876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800187c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2105      	movs	r1, #5
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fa68 	bl	8002d64 <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800189a:	f000 fa45 	bl	8001d28 <Error_Handler>
  }
}
 800189e:	bf00      	nop
 80018a0:	3750      	adds	r7, #80	; 0x50
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_SPI1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <MX_SPI1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_SPI1_Init+0x64>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_SPI1_Init+0x64>)
 8001902:	f001 fbf7 	bl	80030f4 <HAL_SPI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800190c:	f000 fa0c 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000011c 	.word	0x2000011c
 8001918:	40013000 	.word	0x40013000

0800191c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM2_Init+0x94>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001942:	f240 3247 	movw	r2, #839	; 0x347
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM2_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001950:	2263      	movs	r2, #99	; 0x63
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM2_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001962:	f002 f877 	bl	8003a54 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800196c:	f000 f9dc 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM2_Init+0x94>)
 800197e:	f002 fa31 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 f9ce 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM2_Init+0x94>)
 800199a:	f002 fc4d 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f9c0 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000174 	.word	0x20000174

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a68      	ldr	r2, [pc, #416]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b62      	ldr	r3, [pc, #392]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a61      	ldr	r2, [pc, #388]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b54      	ldr	r3, [pc, #336]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <MX_GPIO_Init+0x1dc>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUTPUT_Y1_Pin|OUTPUT_Y0_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2107      	movs	r1, #7
 8001a92:	4840      	ldr	r0, [pc, #256]	; (8001b94 <MX_GPIO_Init+0x1e0>)
 8001a94:	f000 fed4 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9e:	483e      	ldr	r0, [pc, #248]	; (8001b98 <MX_GPIO_Init+0x1e4>)
 8001aa0:	f000 fece 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	483c      	ldr	r0, [pc, #240]	; (8001b9c <MX_GPIO_Init+0x1e8>)
 8001aaa:	f000 fec9 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab4:	483a      	ldr	r0, [pc, #232]	; (8001ba0 <MX_GPIO_Init+0x1ec>)
 8001ab6:	f000 fec3 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <MX_GPIO_Init+0x1f0>)
 8001ac0:	f000 febe 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUTPUT_Y1_Pin OUTPUT_Y0_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT_Y1_Pin|OUTPUT_Y0_Pin|DEBUG_LED_Pin;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482e      	ldr	r0, [pc, #184]	; (8001b94 <MX_GPIO_Init+0x1e0>)
 8001adc:	f000 fd14 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4827      	ldr	r0, [pc, #156]	; (8001b98 <MX_GPIO_Init+0x1e4>)
 8001afa:	f000 fd05 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 8001afe:	233c      	movs	r3, #60	; 0x3c
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4822      	ldr	r0, [pc, #136]	; (8001b9c <MX_GPIO_Init+0x1e8>)
 8001b12:	f000 fcf9 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001b16:	2340      	movs	r3, #64	; 0x40
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481b      	ldr	r0, [pc, #108]	; (8001b9c <MX_GPIO_Init+0x1e8>)
 8001b2e:	f000 fceb 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <MX_GPIO_Init+0x1ec>)
 8001b4c:	f000 fcdc 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001b50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <MX_GPIO_Init+0x1ec>)
 8001b66:	f000 fccf 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <MX_GPIO_Init+0x1f0>)
 8001b82:	f000 fcc1 	bl	8002508 <HAL_GPIO_Init>

}
 8001b86:	bf00      	nop
 8001b88:	3730      	adds	r7, #48	; 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	615a      	str	r2, [r3, #20]
 8001bc0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bd6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bda:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <MX_FSMC_Init+0xf0>)
 8001be0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001c3e:	230f      	movs	r3, #15
 8001c40:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001c42:	233c      	movs	r3, #60	; 0x3c
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001c4e:	2311      	movs	r3, #17
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001c56:	2308      	movs	r3, #8
 8001c58:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001c5e:	2309      	movs	r3, #9
 8001c60:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001c66:	2310      	movs	r3, #16
 8001c68:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001c6a:	2311      	movs	r3, #17
 8001c6c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001c72:	463a      	mov	r2, r7
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_FSMC_Init+0xec>)
 8001c7c:	f001 fea6 	bl	80039cc <HAL_SRAM_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001c86:	f000 f84f 	bl	8001d28 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3738      	adds	r7, #56	; 0x38
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200000cc 	.word	0x200000cc
 8001c98:	a0000104 	.word	0xa0000104

08001c9c <test_lcd>:
void test_button(){
	for(int i = 0; i < 16; i++){
	}
}

void test_lcd() {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af02      	add	r7, sp, #8
//	lcd_StrCenter(0, 2, "Hello Money", RED, BLUE, 16, 0);
//	lcd_ShowStr(20, 30, "Test LCD Screen", WHITE, RED, 24, 1);

	// Vertical
	lcd_DrawCircle(180, 120, RED, 20, 0);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2314      	movs	r3, #20
 8001ca8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	20b4      	movs	r0, #180	; 0xb4
 8001cb0:	f7ff fcb7 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(180, 170, GREEN, 20, 0);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2314      	movs	r3, #20
 8001cba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cbe:	21aa      	movs	r1, #170	; 0xaa
 8001cc0:	20b4      	movs	r0, #180	; 0xb4
 8001cc2:	f7ff fcae 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(180, 220, YELLOW, 20, 0);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2314      	movs	r3, #20
 8001ccc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001cd0:	21dc      	movs	r1, #220	; 0xdc
 8001cd2:	20b4      	movs	r0, #180	; 0xb4
 8001cd4:	f7ff fca5 	bl	8001622 <lcd_DrawCircle>

	// Horizontal
	lcd_DrawCircle(120, 60, RED, 20, 0);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2314      	movs	r3, #20
 8001cde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ce2:	213c      	movs	r1, #60	; 0x3c
 8001ce4:	2078      	movs	r0, #120	; 0x78
 8001ce6:	f7ff fc9c 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(70, 60, GREEN, 20, 0);
 8001cea:	2300      	movs	r3, #0
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2314      	movs	r3, #20
 8001cf0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cf4:	213c      	movs	r1, #60	; 0x3c
 8001cf6:	2046      	movs	r0, #70	; 0x46
 8001cf8:	f7ff fc93 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(20, 60, YELLOW, 20, 0);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2314      	movs	r3, #20
 8001d02:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d06:	213c      	movs	r1, #60	; 0x3c
 8001d08:	2014      	movs	r0, #20
 8001d0a:	f7ff fc8a 	bl	8001622 <lcd_DrawCircle>
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	timerRun();
 8001d1c:	f000 f86a 	bl	8001df4 <timerRun>
//	getKeyInputButton1();
//	getKeyInputButton2();
//	getKeyInputButton3();
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <setTimer1>:
int timer3_flag = 0;

int idx = 0;
int TICK = 10;

void setTimer1 (int duration) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001d3c:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <setTimer1+0x20>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <setTimer1+0x24>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000050 	.word	0x20000050
 8001d58:	20000054 	.word	0x20000054

08001d5c <setTimer2>:

void setTimer2 (int duration) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <setTimer2+0x20>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <setTimer2+0x24>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20000058 	.word	0x20000058
 8001d80:	2000005c 	.word	0x2000005c

08001d84 <setTimer3>:

void setTimer3 (int duration) {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <setTimer3+0x20>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <setTimer3+0x24>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000060 	.word	0x20000060
 8001da8:	20000064 	.word	0x20000064

08001dac <isTimer1Paused>:

int isTimer1Paused(int pause) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	if (timer1_counter > (pause + 5)) return 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1d5a      	adds	r2, r3, #5
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <isTimer1Paused+0x44>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	da01      	bge.n	8001dc4 <isTimer1Paused+0x18>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e010      	b.n	8001de6 <isTimer1Paused+0x3a>
	else if (timer1_counter <= (pause + 5) && timer1_counter >= pause) lcd_Clear(WHITE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1d5a      	adds	r2, r3, #5
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <isTimer1Paused+0x44>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	db09      	blt.n	8001de4 <isTimer1Paused+0x38>
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <isTimer1Paused+0x44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dc04      	bgt.n	8001de4 <isTimer1Paused+0x38>
 8001dda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dde:	f7ff f85d 	bl	8000e9c <lcd_Clear>
	else return 1;
}
 8001de2:	e000      	b.n	8001de6 <isTimer1Paused+0x3a>
	else return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000050 	.word	0x20000050

08001df4 <timerRun>:

void timerRun() {
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) --timer1_counter;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <timerRun+0x5c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dd05      	ble.n	8001e0c <timerRun+0x18>
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <timerRun+0x5c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <timerRun+0x5c>)
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e002      	b.n	8001e12 <timerRun+0x1e>
	else timer1_flag = 1;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <timerRun+0x60>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

	if (timer2_counter > 0) --timer2_counter;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <timerRun+0x64>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dd05      	ble.n	8001e26 <timerRun+0x32>
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <timerRun+0x64>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <timerRun+0x64>)
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e002      	b.n	8001e2c <timerRun+0x38>
	else {
		timer2_flag = 1;
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <timerRun+0x68>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) --timer3_counter;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <timerRun+0x6c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	dd05      	ble.n	8001e40 <timerRun+0x4c>
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <timerRun+0x6c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <timerRun+0x6c>)
 8001e3c:	6013      	str	r3, [r2, #0]
	else timer3_flag = 1;
}
 8001e3e:	e002      	b.n	8001e46 <timerRun+0x52>
	else timer3_flag = 1;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <timerRun+0x70>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20000050 	.word	0x20000050
 8001e54:	20000054 	.word	0x20000054
 8001e58:	20000058 	.word	0x20000058
 8001e5c:	2000005c 	.word	0x2000005c
 8001e60:	20000060 	.word	0x20000060
 8001e64:	20000064 	.word	0x20000064

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_SPI_MspInit+0x84>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12b      	bne.n	8001f32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_SPI_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f12:	2338      	movs	r3, #56	; 0x38
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f22:	2305      	movs	r3, #5
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_SPI_MspInit+0x8c>)
 8001f2e:	f000 faeb 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40013000 	.word	0x40013000
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020400 	.word	0x40020400

08001f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d115      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0x48>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_TIM_Base_MspInit+0x48>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201c      	movs	r0, #28
 8001f7c:	f000 fa8d 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f80:	201c      	movs	r0, #28
 8001f82:	f000 faa6 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_FSMC_MspInit+0x88>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d131      	bne.n	8002014 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_FSMC_MspInit+0x88>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_FSMC_MspInit+0x8c>)
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_FSMC_MspInit+0x8c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6393      	str	r3, [r2, #56]	; 0x38
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_FSMC_MspInit+0x8c>)
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001fd2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001fd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <HAL_FSMC_MspInit+0x90>)
 8001fee:	f000 fa8b 	bl	8002508 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ff2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001ff6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002004:	230c      	movs	r3, #12
 8002006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <HAL_FSMC_MspInit+0x94>)
 800200e:	f000 fa7b 	bl	8002508 <HAL_GPIO_Init>
 8002012:	e000      	b.n	8002016 <HAL_FSMC_MspInit+0x82>
    return;
 8002014:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000006c 	.word	0x2000006c
 8002020:	40023800 	.word	0x40023800
 8002024:	40021000 	.word	0x40021000
 8002028:	40020c00 	.word	0x40020c00

0800202c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002034:	f7ff ffae 	bl	8001f94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 f8e6 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM2_IRQHandler+0x10>)
 800209a:	f001 fd9b 	bl	8003bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000174 	.word	0x20000174

080020a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <setColorVertical>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "traffic_light.h"

void setColorVertical(uint16_t Led_1_color, uint16_t Led_2_color, uint16_t Led_3_color, int Led_1_State, int Led_2_State, int Led_3_State) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	4603      	mov	r3, r0
 80020d6:	81fb      	strh	r3, [r7, #14]
 80020d8:	460b      	mov	r3, r1
 80020da:	81bb      	strh	r3, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	817b      	strh	r3, [r7, #10]
	lcd_DrawCircle(180, 120, Led_1_color, 20, Led_1_State);
 80020e0:	89fa      	ldrh	r2, [r7, #14]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2314      	movs	r3, #20
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	20b4      	movs	r0, #180	; 0xb4
 80020ec:	f7ff fa99 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(180, 170, Led_2_color, 20, Led_2_State);
 80020f0:	89ba      	ldrh	r2, [r7, #12]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2314      	movs	r3, #20
 80020f8:	21aa      	movs	r1, #170	; 0xaa
 80020fa:	20b4      	movs	r0, #180	; 0xb4
 80020fc:	f7ff fa91 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(180, 220, Led_3_color, 20, Led_3_State);
 8002100:	897a      	ldrh	r2, [r7, #10]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2314      	movs	r3, #20
 8002108:	21dc      	movs	r1, #220	; 0xdc
 800210a:	20b4      	movs	r0, #180	; 0xb4
 800210c:	f7ff fa89 	bl	8001622 <lcd_DrawCircle>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <setColorHorizontal>:

void setColorHorizontal(uint16_t Led_1_color, uint16_t Led_2_color, uint16_t Led_3_color, int Led_1_State, int Led_2_State, int Led_3_State) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af02      	add	r7, sp, #8
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	4603      	mov	r3, r0
 8002122:	81fb      	strh	r3, [r7, #14]
 8002124:	460b      	mov	r3, r1
 8002126:	81bb      	strh	r3, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	817b      	strh	r3, [r7, #10]
	lcd_DrawCircle(120, 60, Led_1_color, 20, Led_1_State);
 800212c:	89fa      	ldrh	r2, [r7, #14]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2314      	movs	r3, #20
 8002134:	213c      	movs	r1, #60	; 0x3c
 8002136:	2078      	movs	r0, #120	; 0x78
 8002138:	f7ff fa73 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(70, 60, Led_2_color, 20, Led_2_State);
 800213c:	89ba      	ldrh	r2, [r7, #12]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2314      	movs	r3, #20
 8002144:	213c      	movs	r1, #60	; 0x3c
 8002146:	2046      	movs	r0, #70	; 0x46
 8002148:	f7ff fa6b 	bl	8001622 <lcd_DrawCircle>
	lcd_DrawCircle(20, 60, Led_3_color, 20, Led_3_State);
 800214c:	897a      	ldrh	r2, [r7, #10]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2314      	movs	r3, #20
 8002154:	213c      	movs	r1, #60	; 0x3c
 8002156:	2014      	movs	r0, #20
 8002158:	f7ff fa63 	bl	8001622 <lcd_DrawCircle>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002180:	4c0b      	ldr	r4, [pc, #44]	; (80021b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800218e:	f7ff ff8b 	bl	80020a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f002 f9b1 	bl	80044f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff fb01 	bl	800179c <main>
  bx  lr    
 800219a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800219c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80021a8:	08007508 	.word	0x08007508
  ldr r2, =_sbss
 80021ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80021b0:	200001c0 	.word	0x200001c0

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f94f 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fe3c 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f967 	bl	80024ee <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f92f 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000014 	.word	0x20000014
 8002254:	2000001c 	.word	0x2000001c
 8002258:	20000018 	.word	0x20000018

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	2000001c 	.word	0x2000001c
 8002280:	200001bc 	.word	0x200001bc

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200001bc 	.word	0x200001bc

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000001c 	.word	0x2000001c

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	; (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e16b      	b.n	80027fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 815a 	bne.w	80027f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b4 	beq.w	80027f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b60      	ldr	r3, [pc, #384]	; (8002814 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <HAL_GPIO_Init+0x30c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a5b      	ldr	r2, [pc, #364]	; (8002818 <HAL_GPIO_Init+0x310>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x226>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x222>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a50      	ldr	r2, [pc, #320]	; (8002824 <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	; (800282c <HAL_GPIO_Init+0x324>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x20a>
 800270e:	2307      	movs	r3, #7
 8002710:	e00e      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002712:	2308      	movs	r3, #8
 8002714:	e00c      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002716:	2306      	movs	r3, #6
 8002718:	e00a      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271a:	2305      	movs	r3, #5
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271e:	2304      	movs	r3, #4
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	; (8002818 <HAL_GPIO_Init+0x310>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_GPIO_Init+0x334>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <HAL_GPIO_Init+0x334>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_GPIO_Init+0x334>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_GPIO_Init+0x334>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_GPIO_Init+0x334>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_GPIO_Init+0x334>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_GPIO_Init+0x334>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_GPIO_Init+0x334>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f ae90 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40021400 	.word	0x40021400
 8002834:	40021800 	.word	0x40021800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e264      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	4ba3      	ldr	r3, [pc, #652]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b9d      	ldr	r3, [pc, #628]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b99      	ldr	r3, [pc, #612]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e23f      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b91      	ldr	r3, [pc, #580]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a8a      	ldr	r2, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a87      	ldr	r2, [pc, #540]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a83      	ldr	r2, [pc, #524]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a80      	ldr	r2, [pc, #512]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fcaa 	bl	8002284 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fca6 	bl	8002284 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e204      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fc96 	bl	8002284 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc92 	bl	8002284 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f0      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c4      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4952      	ldr	r1, [pc, #328]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fc4b 	bl	8002284 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fc47 	bl	8002284 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a5      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4940      	ldr	r1, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fc2a 	bl	8002284 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff fc26 	bl	8002284 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e184      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d030      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fc0a 	bl	8002284 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fc06 	bl	8002284 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e164      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e015      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fbf3 	bl	8002284 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fbef 	bl	8002284 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e14d      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a0 	beq.w	8002c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d121      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7ff fbb5 	bl	8002284 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e011      	b.n	8002b42 <HAL_RCC_OscConfig+0x2ce>
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
 8002b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7ff fba8 	bl	8002284 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e106      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x4e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2f0>
 8002b56:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	e01c      	b.n	8002b9e <HAL_RCC_OscConfig+0x32a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x312>
 8002b6c:	4b7b      	ldr	r3, [pc, #492]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a7a      	ldr	r2, [pc, #488]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	4b78      	ldr	r3, [pc, #480]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a77      	ldr	r2, [pc, #476]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0x32a>
 8002b86:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a74      	ldr	r2, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b72      	ldr	r3, [pc, #456]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a71      	ldr	r2, [pc, #452]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7ff fb6d 	bl	8002284 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff fb69 	bl	8002284 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0c5      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <HAL_RCC_OscConfig+0x33a>
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7ff fb57 	bl	8002284 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7ff fb53 	bl	8002284 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0af      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 809b 	beq.w	8002d4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d05c      	beq.n	8002cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d141      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7ff fb27 	bl	8002284 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff fb23 	bl	8002284 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e081      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	019b      	lsls	r3, r3, #6
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fafc 	bl	8002284 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c90:	f7ff faf8 	bl	8002284 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e056      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x41c>
 8002cae:	e04e      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fae5 	bl	8002284 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7ff fae1 	bl	8002284 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03f      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x44a>
 8002cdc:	e037      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e032      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d028      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d121      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470060 	.word	0x42470060

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7ff fa16 	bl	8002284 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7ff fa12 	bl	8002284 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f976 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	080074e8 	.word	0x080074e8
 8002f28:	20000014 	.word	0x20000014
 8002f2c:	20000018 	.word	0x20000018

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80bd 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0b7      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f66:	60bb      	str	r3, [r7, #8]
       break;
 8002f68:	e0b7      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f6c:	60bb      	str	r3, [r7, #8]
      break;
 8002f6e:	e0b4      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d04d      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	ea02 0800 	and.w	r8, r2, r0
 8002f9e:	ea03 0901 	and.w	r9, r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	014b      	lsls	r3, r1, #5
 8002fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb4:	0142      	lsls	r2, r0, #5
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	ebb0 0008 	subs.w	r0, r0, r8
 8002fbe:	eb61 0109 	sbc.w	r1, r1, r9
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd0:	0182      	lsls	r2, r0, #6
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd8:	f04f 0000 	mov.w	r0, #0
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	00d9      	lsls	r1, r3, #3
 8002fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe6:	00d0      	lsls	r0, r2, #3
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	eb12 0208 	adds.w	r2, r2, r8
 8002ff0:	eb43 0309 	adc.w	r3, r3, r9
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	0259      	lsls	r1, r3, #9
 8002ffe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003002:	0250      	lsls	r0, r2, #9
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f7fd f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e04a      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	461a      	mov	r2, r3
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	ea02 0400 	and.w	r4, r2, r0
 800303a:	ea03 0501 	and.w	r5, r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	014b      	lsls	r3, r1, #5
 800304c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003050:	0142      	lsls	r2, r0, #5
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	1b00      	subs	r0, r0, r4
 8003058:	eb61 0105 	sbc.w	r1, r1, r5
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	018b      	lsls	r3, r1, #6
 8003066:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800306a:	0182      	lsls	r2, r0, #6
 800306c:	1a12      	subs	r2, r2, r0
 800306e:	eb63 0301 	sbc.w	r3, r3, r1
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003080:	00d0      	lsls	r0, r2, #3
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	1912      	adds	r2, r2, r4
 8003088:	eb45 0303 	adc.w	r3, r5, r3
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0299      	lsls	r1, r3, #10
 8003096:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800309a:	0290      	lsls	r0, r2, #10
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	f7fd f88c 	bl	80001c8 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	60bb      	str	r3, [r7, #8]
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d6:	60bb      	str	r3, [r7, #8]
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07b      	b.n	80031fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003116:	d009      	beq.n	800312c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
 800311e:	e005      	b.n	800312c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe feb6 	bl	8001eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003162:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	ea42 0103 	orr.w	r1, r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0104 	and.w	r1, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 0210 	and.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af02      	add	r7, sp, #8
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003222:	d112      	bne.n	800324a <HAL_SPI_Receive+0x44>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10e      	bne.n	800324a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2204      	movs	r2, #4
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f8f1 	bl	8003428 <HAL_SPI_TransmitReceive>
 8003246:	4603      	mov	r3, r0
 8003248:	e0ea      	b.n	8003420 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_SPI_Receive+0x52>
 8003254:	2302      	movs	r3, #2
 8003256:	e0e3      	b.n	8003420 <HAL_SPI_Receive+0x21a>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003260:	f7ff f810 	bl	8002284 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003276:	e0ca      	b.n	800340e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_SPI_Receive+0x7e>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003288:	e0c1      	b.n	800340e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2204      	movs	r2, #4
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d0:	d10f      	bne.n	80032f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d007      	beq.n	8003310 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d162      	bne.n	80033de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003318:	e02e      	b.n	8003378 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d115      	bne.n	8003354 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f103 020c 	add.w	r2, r3, #12
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003352:	e011      	b.n	8003378 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003354:	f7fe ff96 	bl	8002284 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d803      	bhi.n	800336c <HAL_SPI_Receive+0x166>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Receive+0x16c>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003376:	e04a      	b.n	800340e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1cb      	bne.n	800331a <HAL_SPI_Receive+0x114>
 8003382:	e031      	b.n	80033e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d113      	bne.n	80033ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	b292      	uxth	r2, r2
 800339e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b8:	e011      	b.n	80033de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ba:	f7fe ff63 	bl	8002284 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d803      	bhi.n	80033d2 <HAL_SPI_Receive+0x1cc>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Receive+0x1d2>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033dc:	e017      	b.n	800340e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cd      	bne.n	8003384 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa45 	bl	800387c <SPI_EndRxTransaction>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
 800340a:	e000      	b.n	800340e <HAL_SPI_Receive+0x208>
  }

error :
 800340c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003436:	2301      	movs	r3, #1
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_SPI_TransmitReceive+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e18a      	b.n	8003764 <HAL_SPI_TransmitReceive+0x33c>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003456:	f7fe ff15 	bl	8002284 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003474:	2b01      	cmp	r3, #1
 8003476:	d00f      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x70>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347e:	d107      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x68>
 8003488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800348c:	2b04      	cmp	r3, #4
 800348e:	d003      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003490:	2302      	movs	r3, #2
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003496:	e15b      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x82>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x82>
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034b0:	e14e      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d003      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d007      	beq.n	800351a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003522:	d178      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x10a>
 800352c:	8b7b      	ldrh	r3, [r7, #26]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d166      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	1c9a      	adds	r2, r3, #2
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003556:	e053      	b.n	8003600 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d11b      	bne.n	800359e <HAL_SPI_TransmitReceive+0x176>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d016      	beq.n	800359e <HAL_SPI_TransmitReceive+0x176>
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d113      	bne.n	800359e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d119      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x1b8>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	b292      	uxth	r2, r2
 80035c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035e0:	f7fe fe50 	bl	8002284 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d807      	bhi.n	8003600 <HAL_SPI_TransmitReceive+0x1d8>
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d003      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035fe:	e0a7      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1a6      	bne.n	8003558 <HAL_SPI_TransmitReceive+0x130>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1a1      	bne.n	8003558 <HAL_SPI_TransmitReceive+0x130>
 8003614:	e07c      	b.n	8003710 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x1fc>
 800361e:	8b7b      	ldrh	r3, [r7, #26]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d16b      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364a:	e057      	b.n	80036fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d11c      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x26c>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x26c>
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d114      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d119      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x2ae>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d014      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036d2:	2301      	movs	r3, #1
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036d6:	f7fe fdd5 	bl	8002284 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d803      	bhi.n	80036ee <HAL_SPI_TransmitReceive+0x2c6>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x2cc>
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036fa:	e029      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1a2      	bne.n	800364c <HAL_SPI_TransmitReceive+0x224>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d19d      	bne.n	800364c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f917 	bl	8003948 <SPI_EndRxTxTransaction>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800372c:	e010      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	e000      	b.n	8003750 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800374e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003764:	4618      	mov	r0, r3
 8003766:	3730      	adds	r7, #48	; 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800377c:	f7fe fd82 	bl	8002284 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800378c:	f7fe fd7a 	bl	8002284 <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	0d1b      	lsrs	r3, r3, #20
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	e054      	b.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d050      	beq.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ac:	f7fe fd6a 	bl	8002284 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d902      	bls.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d13d      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d111      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d004      	beq.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d107      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003808:	d10f      	bne.n	800382a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e017      	b.n	800386e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3b01      	subs	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d19b      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000014 	.word	0x20000014

0800387c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003890:	d111      	bne.n	80038b6 <SPI_EndRxTransaction+0x3a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389a:	d004      	beq.n	80038a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d107      	bne.n	80038b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038be:	d12a      	bne.n	8003916 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	d012      	beq.n	80038f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2180      	movs	r1, #128	; 0x80
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff ff49 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e026      	b.n	800393e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2101      	movs	r1, #1
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff36 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e013      	b.n	800393e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2200      	movs	r2, #0
 800391e:	2101      	movs	r1, #1
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff ff23 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e000      	b.n	800393e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <SPI_EndRxTxTransaction+0x7c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <SPI_EndRxTxTransaction+0x80>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0d5b      	lsrs	r3, r3, #21
 8003960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003972:	d112      	bne.n	800399a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fef4 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e00f      	b.n	80039ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b80      	cmp	r3, #128	; 0x80
 80039b2:	d0f2      	beq.n	800399a <SPI_EndRxTxTransaction+0x52>
 80039b4:	e000      	b.n	80039b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80039b6:	bf00      	nop
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000014 	.word	0x20000014
 80039c8:	165e9f81 	.word	0x165e9f81

080039cc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e034      	b.n	8003a4c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7fe fb18 	bl	800202c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3308      	adds	r3, #8
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 fca6 	bl	8004358 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	f000 fcf0 	bl	80043fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6858      	ldr	r0, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	f000 fd25 	bl	8004478 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6892      	ldr	r2, [r2, #8]
 8003a42:	f041 0101 	orr.w	r1, r1, #1
 8003a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e041      	b.n	8003aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe fa64 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f000 fa96 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04e      	b.n	8003baa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a23      	ldr	r2, [pc, #140]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d01d      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x80>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d010      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	e007      	b.n	8003ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40001800 	.word	0x40001800

08003bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0202 	mvn.w	r2, #2
 8003c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9b5 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9a7 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f9b8 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d122      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0204 	mvn.w	r2, #4
 8003c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f98b 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f97d 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f98e 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0208 	mvn.w	r2, #8
 8003ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2204      	movs	r2, #4
 8003cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f961 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f953 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f964 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0210 	mvn.w	r2, #16
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2208      	movs	r2, #8
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f937 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f929 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f93a 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0201 	mvn.w	r2, #1
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd ffde 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fae0 	bl	8004344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8ff 	bl	8003fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0220 	mvn.w	r2, #32
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 faaa 	bl	8004330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0b4      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x186>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d03e      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	f200 8087 	bhi.w	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	f000 8086 	beq.w	8003f56 <HAL_TIM_ConfigClockSource+0x172>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d87f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d01a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xa6>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d87b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d050      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x11a>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d877      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d03c      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xfa>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d873      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d058      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x13a>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d86f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d064      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d86b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d060      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d867      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d05a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	e062      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 f9ad 	bl	80041f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	609a      	str	r2, [r3, #8]
      break;
 8003eb6:	e04f      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 f996 	bl	80041f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eda:	609a      	str	r2, [r3, #8]
      break;
 8003edc:	e03c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 f90a 	bl	8004104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2150      	movs	r1, #80	; 0x50
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f963 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e02c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f929 	bl	8004162 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2160      	movs	r1, #96	; 0x60
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f953 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f8ea 	bl	8004104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f943 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 f93a 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d00f      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	; (80040dc <TIM_Base_SetConfig+0x118>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d027      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <TIM_Base_SetConfig+0x118>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d023      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <TIM_Base_SetConfig+0x128>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <TIM_Base_SetConfig+0x12c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <TIM_Base_SetConfig+0x130>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <TIM_Base_SetConfig+0x134>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a24      	ldr	r2, [pc, #144]	; (80040fc <TIM_Base_SetConfig+0x138>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <TIM_Base_SetConfig+0x13c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800
 80040f8:	40001800 	.word	0x40001800
 80040fc:	40001c00 	.word	0x40001c00
 8004100:	40002000 	.word	0x40002000

08004104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 030a 	bic.w	r3, r3, #10
 8004140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004162:	b480      	push	{r7}
 8004164:	b087      	sub	sp, #28
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0210 	bic.w	r2, r3, #16
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800418c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800419e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f043 0307 	orr.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	431a      	orrs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e05a      	b.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d01d      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10c      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40010400 	.word	0x40010400
 8004328:	40014000 	.word	0x40014000
 800432c:	40001800 	.word	0x40001800

08004330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <FSMC_NORSRAM_Init+0xa0>)
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004382:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004388:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800438e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004394:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800439a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80043a0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80043a6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80043ac:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80043b2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80043b8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80043be:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80043c4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d103      	bne.n	80043dc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043da:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	fff00080 	.word	0xfff00080

080043fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004416:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800441e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800442a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004432:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800443a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	3b01      	subs	r3, #1
 8004442:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004444:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	3b02      	subs	r3, #2
 800444c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800444e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004454:	4313      	orrs	r3, r2
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004490:	d122      	bne.n	80044d8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80044be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6979      	ldr	r1, [r7, #20]
 80044d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80044d6:	e005      	b.n	80044e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80044e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	cff00000 	.word	0xcff00000

080044f8 <__libc_init_array>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4d0d      	ldr	r5, [pc, #52]	; (8004530 <__libc_init_array+0x38>)
 80044fc:	4c0d      	ldr	r4, [pc, #52]	; (8004534 <__libc_init_array+0x3c>)
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	10a4      	asrs	r4, r4, #2
 8004502:	2600      	movs	r6, #0
 8004504:	42a6      	cmp	r6, r4
 8004506:	d109      	bne.n	800451c <__libc_init_array+0x24>
 8004508:	4d0b      	ldr	r5, [pc, #44]	; (8004538 <__libc_init_array+0x40>)
 800450a:	4c0c      	ldr	r4, [pc, #48]	; (800453c <__libc_init_array+0x44>)
 800450c:	f000 f820 	bl	8004550 <_init>
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	2600      	movs	r6, #0
 8004516:	42a6      	cmp	r6, r4
 8004518:	d105      	bne.n	8004526 <__libc_init_array+0x2e>
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004520:	4798      	blx	r3
 8004522:	3601      	adds	r6, #1
 8004524:	e7ee      	b.n	8004504 <__libc_init_array+0xc>
 8004526:	f855 3b04 	ldr.w	r3, [r5], #4
 800452a:	4798      	blx	r3
 800452c:	3601      	adds	r6, #1
 800452e:	e7f2      	b.n	8004516 <__libc_init_array+0x1e>
 8004530:	08007500 	.word	0x08007500
 8004534:	08007500 	.word	0x08007500
 8004538:	08007500 	.word	0x08007500
 800453c:	08007504 	.word	0x08007504

08004540 <memset>:
 8004540:	4402      	add	r2, r0
 8004542:	4603      	mov	r3, r0
 8004544:	4293      	cmp	r3, r2
 8004546:	d100      	bne.n	800454a <memset+0xa>
 8004548:	4770      	bx	lr
 800454a:	f803 1b01 	strb.w	r1, [r3], #1
 800454e:	e7f9      	b.n	8004544 <memset+0x4>

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
